{"ast":null,"code":"/**\n * Fuse.js v6.4.6 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\nfunction isArray(value) {\n  return !Array.isArray ? getTag(value) === '[object Array]' : Array.isArray(value);\n} // Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\n\n\nconst INFINITY = 1 / 0;\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n} // Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\n\n\nfunction isBoolean(value) {\n  return value === true || value === false || isObjectLike(value) && getTag(value) == '[object Boolean]';\n}\n\nfunction isObject(value) {\n  return typeof value === 'object';\n} // Checks if `value` is object-like.\n\n\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null;\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null;\n}\n\nfunction isBlank(value) {\n  return !value.trim().length;\n} // Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\n\n\nfunction getTag(value) {\n  return value == null ? value === undefined ? '[object Undefined]' : '[object Null]' : Object.prototype.toString.call(value);\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = key => `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = max => `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = name => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = key => `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n    let totalWeight = 0;\n    keys.forEach(key => {\n      let obj = createKey(key);\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n\n      this._keyMap[obj.id] = obj;\n      totalWeight += obj.weight;\n    }); // Normalize weights so that their sum is equal to 1\n\n    this._keys.forEach(key => {\n      key.weight /= totalWeight;\n    });\n  }\n\n  get(keyId) {\n    return this._keyMap[keyId];\n  }\n\n  keys() {\n    return this._keys;\n  }\n\n  toJSON() {\n    return JSON.stringify(this._keys);\n  }\n\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'));\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name));\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return {\n    path,\n    id,\n    weight,\n    src\n  };\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.');\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key;\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return;\n    }\n\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return;\n      } // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n\n\n      if (index === path.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true; // Search each item in the array.\n\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  }; // Backwards compatibility (since path used to be a string)\n\n\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n  return arr ? list : list[0];\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) => a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1\n};\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\nvar Config = { ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\nconst SPACE = /[^ ]+/g; // Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\n\nfunction norm() {\n  let mantissa = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens);\n      }\n\n      const norm = 1 / Math.sqrt(numTokens); // In place of `toFixed(mantissa)`, for faster computation\n\n      const n = parseFloat(Math.round(norm * m) / m);\n      cache.set(numTokens, n);\n      return n;\n    },\n\n    clear() {\n      cache.clear();\n    }\n\n  };\n}\n\nclass FuseIndex {\n  constructor() {\n    let {\n      getFn = Config.getFn\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n    this.setIndexRecords();\n  }\n\n  setSources() {\n    let docs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.docs = docs;\n  }\n\n  setIndexRecords() {\n    let records = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.records = records;\n  }\n\n  setKeys() {\n    let keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return;\n    }\n\n    this.isCreated = true; // List is Array<String>\n\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  } // Adds a doc to the end of the index\n\n\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  } // Removes the doc at the specified index of the index\n\n\n  removeAt(idx) {\n    this.records.splice(idx, 1); // Change ref index of every subsquent doc\n\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]];\n  }\n\n  size() {\n    return this.records.length;\n  }\n\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return;\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n    this.records.push(record);\n  }\n\n  _addObject(doc, docIndex) {\n    let record = {\n      i: docIndex,\n      $: {}\n    }; // Iterate over every key (i.e, path), and fetch the value at that key\n\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return;\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{\n          nestedArrIndex: -1,\n          value\n        }];\n\n        while (stack.length) {\n          const {\n            nestedArrIndex,\n            value\n          } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue;\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n        record.$[keyIndex] = subRecord;\n      }\n    });\n    this.records.push(record);\n  }\n\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    };\n  }\n\n}\n\nfunction createIndex(keys, docs) {\n  let {\n    getFn = Config.getFn\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const myIndex = new FuseIndex({\n    getFn\n  });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex;\n}\n\nfunction parseIndex(data) {\n  let {\n    getFn = Config.getFn\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    keys,\n    records\n  } = data;\n  const myIndex = new FuseIndex({\n    getFn\n  });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex;\n}\n\nfunction computeScore(pattern) {\n  let {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy;\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy;\n  }\n\n  return accuracy + proximity / distance;\n}\n\nfunction convertMaskToIndices() {\n  let matchmask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let minMatchCharLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Config.minMatchCharLength;\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n\n      start = -1;\n    }\n  } // (i-1 - start) + 1 => i - start\n\n\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices;\n} // Machine word size\n\n\nconst MAX_BITS = 32;\n\nfunction search(text, pattern, patternAlphabet) {\n  let {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));\n  }\n\n  const patternLen = pattern.length; // Set starting location at beginning text and initialize the alphabet.\n\n  const textLen = text.length; // Handle the case when location > text.length\n\n  const expectedLocation = Math.max(0, Math.min(location, textLen)); // Highest score beyond which we give up.\n\n  let currentThreshold = threshold; // Is there a nearby exact match? (speedup)\n\n  let bestLocation = expectedLocation; // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n\n  const computeMatches = minMatchCharLength > 1 || includeMatches; // A mask of the matches, used for building the indices\n\n  const matchMask = computeMatches ? Array(textLen) : [];\n  let index; // Get all exact matches, here for speed up\n\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  } // Reset the best location\n\n\n  bestLocation = -1;\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n  const mask = 1 << patternLen - 1;\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    } // Use the result from this iteration as the maximum for the next.\n\n\n    binMax = binMid;\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen; // Initialize the bit array\n\n    let bitArr = Array(finish + 2);\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      } // First pass: exact match\n\n\n      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch; // Subsequent passes: fuzzy match\n\n      if (i) {\n        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        }); // This match will almost certainly be better than any existing match.\n        // But check anyway.\n\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation; // Already passed `loc`, downhill from here on in.\n\n          if (bestLocation <= expectedLocation) {\n            break;\n          } // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n\n\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    } // No hope for a (better) match at greater error levels.\n\n\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break;\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result;\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | 1 << len - i - 1;\n  }\n\n  return mask;\n}\n\nclass BitapSearch {\n  constructor(pattern) {\n    let {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return;\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const {\n      isCaseSensitive,\n      includeMatches\n    } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    } // Exact match\n\n\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result;\n    } // Otherwise, use Bitap algorithm\n\n\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n    this.chunks.forEach(_ref => {\n      let {\n        pattern,\n        alphabet,\n        startIndex\n      } = _ref;\n      const {\n        isMatch,\n        score,\n        indices\n      } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result;\n  }\n\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex);\n  }\n\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex);\n  }\n\n  search() {}\n\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null;\n} // Token: 'file\n\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'exact';\n  }\n\n  static get multiRegex() {\n    return /^=\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^=(.*)$/;\n  }\n\n  search(text) {\n    const isMatch = text === this.pattern;\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    };\n  }\n\n} // Token: !fire\n\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^!(.*)$/;\n  }\n\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n} // Token: ^file\n\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'prefix-exact';\n  }\n\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^\\^(.*)$/;\n  }\n\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    };\n  }\n\n} // Token: !^fire\n\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-prefix-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^!\\^(.*)$/;\n  }\n\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n} // Token: .file$\n\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'suffix-exact';\n  }\n\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/;\n  }\n\n  static get singleRegex() {\n    return /^(.*)\\$$/;\n  }\n\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    };\n  }\n\n} // Token: !.file$\n\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-suffix-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/;\n  }\n\n  static get singleRegex() {\n    return /^!(.*)\\$$/;\n  }\n\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(pattern) {\n    let {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n\n  static get type() {\n    return 'fuzzy';\n  }\n\n  static get multiRegex() {\n    return /^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^(.*)$/;\n  }\n\n  search(text) {\n    return this._bitapSearch.searchIn(text);\n  }\n\n} // Token: 'file\n\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'include';\n  }\n\n  static get multiRegex() {\n    return /^'\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^'(.*)$/;\n  }\n\n  search(text) {\n    let location = 0;\n    let index;\n    const indices = [];\n    const patternLen = this.pattern.length; // Get all exact matches\n\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    };\n  }\n\n} // ❗Order is important. DO NOT CHANGE.\n\n\nconst searchers = [ExactMatch, IncludeMatch, PrefixExactMatch, InversePrefixExactMatch, InverseSuffixExactMatch, SuffixExactMatch, InverseExactMatch, FuzzyMatch];\nconst searchersLen = searchers.length; // Regex to split by spaces, but keep anything in quotes together\n\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|'; // Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\n\nfunction parseQuery(pattern) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return pattern.split(OR_TOKEN).map(item => {\n    let query = item.trim().split(SPACE_RE).filter(item => item && !!item.trim());\n    let results = [];\n\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i]; // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n\n      let found = false;\n      let idx = -1;\n\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue;\n      } // 2. Handle single query matches (i.e, once that are *not* quoted)\n\n\n      idx = -1;\n\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n\n        if (token) {\n          results.push(new searcher(token, options));\n          break;\n        }\n      }\n    }\n\n    return results;\n  });\n} // These extended matchers can return an array of matches, as opposed\n// to a singl match\n\n\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\n\nclass ExtendedSearch {\n  constructor(pattern) {\n    let {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch;\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      };\n    }\n\n    const {\n      includeMatches,\n      isCaseSensitive\n    } = this.options;\n    text = isCaseSensitive ? text : text.toLowerCase();\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0; // ORs\n\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i]; // Reset indices\n\n      allIndices.length = 0;\n      numMatches = 0; // ANDs\n\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const {\n          isMatch,\n          indices,\n          score\n        } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break;\n        }\n      } // OR condition, so if TRUE, return\n\n\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result;\n      }\n    } // Nothing was matched\n\n\n    return {\n      isMatch: false,\n      score: 1\n    };\n  }\n\n}\n\nconst registeredSearchers = [];\n\nfunction register() {\n  registeredSearchers.push(...arguments);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options);\n    }\n  }\n\n  return new BitapSearch(pattern, options);\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = query => !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = query => !!query[KeyType.PATH];\n\nconst isLeaf = query => !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = query => ({\n  [LogicalOperator.AND]: Object.keys(query).map(key => ({\n    [key]: query[key]\n  }))\n}); // When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\n\n\nfunction parse(query, options) {\n  let {\n    auto = true\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  const next = query => {\n    let keys = Object.keys(query);\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query));\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj;\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n    keys.forEach(key => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach(item => {\n          node.children.push(next(item));\n        });\n      }\n    });\n    return node;\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query);\n} // Practical scoring function\n\n\nfunction computeScore$1(results, _ref2) {\n  let {\n    ignoreFieldNorm = Config.ignoreFieldNorm\n  } = _ref2;\n  results.forEach(result => {\n    let totalScore = 1;\n    result.matches.forEach(_ref3 => {\n      let {\n        key,\n        norm,\n        score\n      } = _ref3;\n      const weight = key ? key.weight : null;\n      totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * (ignoreFieldNorm ? 1 : norm));\n    });\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return;\n  }\n\n  matches.forEach(match => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return;\n    }\n\n    const {\n      indices,\n      value\n    } = match;\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(results, docs) {\n  let {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const transformers = [];\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n  return results.map(result => {\n    const {\n      idx\n    } = result;\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach(transformer => {\n        transformer(result, data);\n      });\n    }\n\n    return data;\n  });\n}\n\nclass Fuse {\n  constructor(docs) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let index = arguments.length > 2 ? arguments[2] : undefined;\n    this.options = { ...Config,\n      ...options\n    };\n\n    if (this.options.useExtendedSearch && !true) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE);\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE);\n    }\n\n    this._myIndex = index || createIndex(this.options.keys, this._docs, {\n      getFn: this.options.getFn\n    });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return;\n    }\n\n    this._docs.push(doc);\n\n    this._myIndex.add(doc);\n  }\n\n  remove() {\n    let predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => false;\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n        results.push(doc);\n      }\n    }\n\n    return results;\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex;\n  }\n\n  search(query) {\n    let {\n      limit = -1\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n    let results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);\n    computeScore$1(results, {\n      ignoreFieldNorm\n    });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    });\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const {\n      records\n    } = this._myIndex;\n    const results = []; // Iterate over every string in the index\n\n    records.forEach(_ref4 => {\n      let {\n        v: text,\n        i: idx,\n        n: norm\n      } = _ref4;\n\n      if (!isDefined(text)) {\n        return;\n      }\n\n      const {\n        isMatch,\n        score,\n        indices\n      } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{\n            score,\n            value: text,\n            norm,\n            indices\n          }]\n        });\n      }\n    });\n    return results;\n  }\n\n  _searchLogical(query) {\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const {\n          keyId,\n          searcher\n        } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [{\n            idx,\n            item,\n            matches\n          }];\n        }\n\n        return [];\n      }\n      /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n\n\n      switch (node.operator) {\n        case LogicalOperator.AND:\n          {\n            const res = [];\n\n            for (let i = 0, len = node.children.length; i < len; i += 1) {\n              const child = node.children[i];\n              const result = evaluate(child, item, idx);\n\n              if (result.length) {\n                res.push(...result);\n              } else {\n                return [];\n              }\n            }\n\n            return res;\n          }\n\n        case LogicalOperator.OR:\n          {\n            const res = [];\n\n            for (let i = 0, len = node.children.length; i < len; i += 1) {\n              const child = node.children[i];\n              const result = evaluate(child, item, idx);\n\n              if (result.length) {\n                res.push(...result);\n                break;\n              }\n            }\n\n            return res;\n          }\n      }\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n    records.forEach(_ref5 => {\n      let {\n        $: item,\n        i: idx\n      } = _ref5;\n\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = {\n              idx,\n              item,\n              matches: []\n            };\n            results.push(resultMap[idx]);\n          }\n\n          expResults.forEach(_ref6 => {\n            let {\n              matches\n            } = _ref6;\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n    return results;\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const {\n      keys,\n      records\n    } = this._myIndex;\n    const results = []; // List is Array<Object>\n\n    records.forEach(_ref7 => {\n      let {\n        $: item,\n        i: idx\n      } = _ref7;\n\n      if (!isDefined(item)) {\n        return;\n      }\n\n      let matches = []; // Iterate over every key (i.e, path), and fetch the value at that key\n\n      keys.forEach((key, keyIndex) => {\n        matches.push(...this._findMatches({\n          key,\n          value: item[keyIndex],\n          searcher\n        }));\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n    return results;\n  }\n\n  _findMatches(_ref8) {\n    let {\n      key,\n      value,\n      searcher\n    } = _ref8;\n\n    if (!isDefined(value)) {\n      return [];\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(_ref9 => {\n        let {\n          v: text,\n          i: idx,\n          n: norm\n        } = _ref9;\n\n        if (!isDefined(text)) {\n          return;\n        }\n\n        const {\n          isMatch,\n          score,\n          indices\n        } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const {\n        v: text,\n        n: norm\n      } = value;\n      const {\n        isMatch,\n        score,\n        indices\n      } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({\n          score,\n          key,\n          value: text,\n          norm,\n          indices\n        });\n      }\n    }\n\n    return matches;\n  }\n\n}\n\nFuse.version = '6.4.6';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n{\n  Fuse.parseQuery = parse;\n}\n{\n  register(ExtendedSearch);\n}\nexport default Fuse;","map":{"version":3,"names":["isArray","value","Array","getTag","INFINITY","baseToString","result","toString","isString","isNumber","isBoolean","isObjectLike","isObject","isDefined","undefined","isBlank","trim","length","Object","prototype","call","EXTENDED_SEARCH_UNAVAILABLE","INCORRECT_INDEX_TYPE","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","key","PATTERN_LENGTH_TOO_LARGE","max","MISSING_KEY_PROPERTY","name","INVALID_KEY_WEIGHT_VALUE","hasOwn","hasOwnProperty","KeyStore","constructor","keys","_keys","_keyMap","totalWeight","forEach","obj","createKey","weight","push","id","get","keyId","toJSON","JSON","stringify","path","src","createKeyPath","createKeyId","Error","split","join","list","arr","deepGet","index","i","len","MatchOptions","includeMatches","findAllMatches","minMatchCharLength","BasicOptions","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","FuzzyOptions","location","threshold","distance","AdvancedOptions","useExtendedSearch","getFn","ignoreLocation","ignoreFieldNorm","Config","SPACE","norm","mantissa","cache","Map","m","Math","pow","numTokens","match","has","sqrt","n","parseFloat","round","set","clear","FuseIndex","isCreated","setIndexRecords","setSources","docs","records","setKeys","_keysMap","create","doc","docIndex","_addString","_addObject","add","size","removeAt","splice","getValueForItemAtKeyId","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","map","parseIndex","data","computeScore","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","convertMaskToIndices","matchmask","indices","start","end","MAX_BITS","search","text","patternAlphabet","patternLen","textLen","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","finish","bitArr","j","charMatch","charAt","isMatch","createPatternAlphabet","char","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","searchIn","allIndices","totalScore","hasMatches","BaseMatch","isMultiMatch","getMatch","multiRegex","isSingleMatch","singleRegex","exp","matches","ExactMatch","type","InverseExactMatch","PrefixExactMatch","startsWith","InversePrefixExactMatch","SuffixExactMatch","endsWith","InverseSuffixExactMatch","FuzzyMatch","_bitapSearch","IncludeMatch","searchers","searchersLen","SPACE_RE","OR_TOKEN","parseQuery","query","filter","results","queryItem","found","searcher","token","MultiMatchSet","Set","ExtendedSearch","condition","_","numMatches","qLen","pLen","registeredSearchers","register","createSearcher","searcherClass","LogicalOperator","AND","OR","KeyType","PATH","PATTERN","isExpression","isPath","isLeaf","convertToExplicit","parse","auto","next","isQueryPath","node","children","operator","computeScore$1","Number","EPSILON","transformMatches","refIndex","transformScore","format","transformers","transformer","Fuse","_keyStore","setCollection","_docs","_myIndex","remove","predicate","getIndex","limit","_searchStringList","_searchObjectList","_searchLogical","sort","slice","expression","evaluate","_findMatches","res","child","resultMap","expResults","version","config"],"sources":["C:/Users/Nehal Gupta/Desktop/MERN-Job-Portal-main/frontend/node_modules/fuse.js/dist/fuse.esm.js"],"sourcesContent":["/**\n * Fuse.js v6.4.6 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return { path, id, weight, src }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      const norm = 1 / Math.sqrt(numTokens);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({ getFn = Config.getFn } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(keys, docs, { getFn = Config.getFn } = {}) {\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(data, { getFn = Config.getFn } = {}) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore$1(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore$1(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n      switch (node.operator) {\n        case LogicalOperator.AND: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n            } else {\n              return []\n            }\n          }\n          return res\n        }\n        case LogicalOperator.OR: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n              break\n            }\n          }\n          return res\n        }\n      }\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '6.4.6';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport default Fuse;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}